#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

#@ def rancher_deployment():
---
apiVersion: v1
kind: Namespace
metadata:
  name: cattle-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rancher-installer
  namespace: cattle-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rancher-installer
subjects:
- kind: ServiceAccount
  name: rancher-installer
  namespace: cattle-system
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: rancher-installer
  namespace: cattle-system
spec:
  template:
    spec:
      containers:
      - name: installer
        image: alpine/helm
        command: ["/bin/sh"]
        args:
          - -c
          #@yaml/text-templated-strings
          - "wget https://storage.googleapis.com/kubernetes-release/release/v1.19.3/bin/linux/amd64/kubectl && chmod +x kubectl && mv kubectl /usr/local/bin/ && until((kubectl get ns cert-manager -o jsonpath='{.metadata.name}' 2>/dev/null= \"cert-manager\"));do echo \"NOT READY\" ;sleep 30; done && sleep 60 && kubectl wait deploy -n cert-manager cert-manager-webhook --for=condition=available && helm repo add rancher-latest https://releases.rancher.com/server-charts/latest && helm install rancher rancher-latest/rancher --namespace cattle-system --set hostname=(@= data.values.RANCHER_FQDN @) --set ingress.tls.source=rancher"
      restartPolicy: Never
      serviceAccountName: rancher-installer
  backoffLimit: 4
#@ end


#@ if data.values.INSTALL_RANCHER and data.values.TKG_CLUSTER_ROLE == "workload":
---
apiVersion: addons.cluster.x-k8s.io/v1alpha3
kind: ClusterResourceSet
metadata:
  name: #@ "{}-rancher-deployment".format(data.values.CLUSTER_NAME)
  labels:
    cluster.x-k8s.io/cluster-name: #@ data.values.CLUSTER_NAME
spec:
  strategy: "ApplyOnce"
  clusterSelector:
    matchLabels:
      tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
  resources:
  - name: #@ "{}-rancher-deployment".format(data.values.CLUSTER_NAME)
    kind: ConfigMap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: #@ "{}-rancher-deployment".format(data.values.CLUSTER_NAME)
data:
  data: #@ yaml.encode(rancher_deployment())
#@ end
