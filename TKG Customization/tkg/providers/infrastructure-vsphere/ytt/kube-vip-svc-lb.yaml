#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

#@ def plndr_cloud_provider():
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: plunder-cloud-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  name: system:plunder-cloud-controller-role
rules:
  - apiGroups: [""]
    resources: ["configmaps", "endpoints","events","services/status"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["nodes", "services"]
    verbs: ["list","get","watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:plunder-cloud-controller-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:plunder-cloud-controller-role
subjects:
- kind: ServiceAccount
  name: plunder-cloud-controller
  namespace: kube-system
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: plndr-cloud-provider
  namespace: kube-system
spec:
  serviceName: plndr-cloud-provider
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kube-vip
      component: plndr-cloud-provider
  template:
    metadata:
      labels:
        app: kube-vip
        component: plndr-cloud-provider
    spec:
      containers:
      - command:
        - /plndr-cloud-provider
        image: plndr/plndr-cloud-provider:0.1.4
        name: plndr-cloud-provider
        imagePullPolicy: Always
        resources: {}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      serviceAccountName: plunder-cloud-controller
#@ end

#@ def kubevip_svc_lb_config():
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vip
  namespace: kube-system
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vip-role
  namespace: kube-system
rules:
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "create", "update", "list", "put"]
  - apiGroups: [""]
    resources: ["configmaps", "endpoints"]
    verbs: ["watch", "get"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vip-role-bind
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: vip 
    apiGroup: ""
roleRef:
  kind: Role
  name: vip-role
  apiGroup: "" 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: kube-vip-cluster
  name: kube-vip-cluster
  namespace: kube-system
spec:
  replicas: 3
  selector:
    matchLabels:
      app: kube-vip-cluster
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: kube-vip-cluster
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "app"
                  operator: In
                  values:
                  - kube-vip-cluster
            topologyKey: "kubernetes.io/hostname"
      containers:
      - image: plndr/kube-vip:0.1.3
        imagePullPolicy: Always
        name: kube-vip
        command:
        - /kube-vip
        - service
        env:
          - name: vip_interface
            value: "eth0"
          - name: vip_configmap
            value: "plndr" 
          - name: vip_arp
            value: "true"
          - name: vip_loglevel
            value: "5"
        resources: {}
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
      hostNetwork: true
      serviceAccountName: vip
status: {}
#@ end

#@ def kubevip_global_vip_cidr():
apiVersion: v1
data:
  cidr-global: #@ data.values.KUBEVIP_GLOBAL_VIP_CIDR
kind: ConfigMap
metadata:
  name: plndr
  namespace: kube-system
#@ end

#@ if data.values.ENABLE_SVC_LB_KUBEVIP and data.values.TKG_CLUSTER_ROLE == "workload":
---
apiVersion: addons.cluster.x-k8s.io/v1alpha3
kind: ClusterResourceSet
metadata:
  name: #@ "{}-kubevip-svc-lb-solution".format(data.values.CLUSTER_NAME)
  labels:
    cluster.x-k8s.io/cluster-name: #@ data.values.CLUSTER_NAME
spec:
  strategy: "ApplyOnce"
  clusterSelector:
    matchLabels:
      tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
  resources:
  - name: #@ "{}-plndr-cloud-provider".format(data.values.CLUSTER_NAME)
    kind: ConfigMap
  - name: #@ "{}-kubevip-svc-lb-config".format(data.values.CLUSTER_NAME)
    kind: ConfigMap
  - name: #@ "{}-kubevip-global-vip-cidr".format(data.values.CLUSTER_NAME)
    kind: ConfigMap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: #@ "{}-plndr-cloud-provider".format(data.values.CLUSTER_NAME)
data:
  data: #@ yaml.encode(plndr_cloud_provider())
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: #@ "{}-kubevip-svc-lb-config".format(data.values.CLUSTER_NAME)
data:
  data: #@ yaml.encode(kubevip_svc_lb_config())
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: #@ "{}-kubevip-global-vip-cidr".format(data.values.CLUSTER_NAME)
data:
  data: #@ yaml.encode(kubevip_global_vip_cidr())
#@ end

