#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

#@ def kubeapps_deployment():
---
apiVersion: v1
kind: Namespace
metadata:
  name: kubeapps
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeapps-installer
  namespace: kubeapps
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-build
subjects:
- kind: ServiceAccount
  name: kubeapps-installer
  namespace: kubeapps
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: ka
  namespace: kubeapps
spec:
  template:
    spec:
      containers:
      - name: ka
        image: alpine/helm
        command: ["/bin/sh"]
        args:
          - -c
          - #@ "helm repo add bitnami https://charts.bitnami.com/bitnami && helm install kubeapps bitnami/kubeapps -n kubeapps --set ingress.enabled=true --set ingress.tls=true --set ingress.certManager=true --set ingress.hostname={}".format(data.values.KUBEAPPS_HOSTNAME)
      restartPolicy: Never
      serviceAccountName: kubeapps-installer
  backoffLimit: 4
#@ end


#@ if data.values.ENABLE_KUBEAPPS and data.values.TKG_CLUSTER_ROLE == "workload":
---
apiVersion: addons.cluster.x-k8s.io/v1alpha3
kind: ClusterResourceSet
metadata:
  name: #@ "{}-kubeapps-deployment".format(data.values.CLUSTER_NAME)
  labels:
    cluster.x-k8s.io/cluster-name: #@ data.values.CLUSTER_NAME
spec:
  strategy: "ApplyOnce"
  clusterSelector:
    matchLabels:
      tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
  resources:
  - name: #@ "{}-kubeapps-deployment".format(data.values.CLUSTER_NAME)
    kind: ConfigMap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: #@ "{}-kubeapps-deployment".format(data.values.CLUSTER_NAME)
data:
  data: #@ yaml.encode(kubeapps_deployment())
#@ end
